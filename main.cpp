#include <iostream>
#include "DCEL.h"
#include "read_file.h"

/*
ะ ะฟะตัะฒะพะน ัััะพะบะต ะดะฐะฝะพ ัะตะปะพะต ัะธัะปะพ ๐ โ ะบะพะปะธัะตััะฒะพ ัะตััะพะฒ.
ะะฐะปะตะต ะธะดัั ๐ ัะตััะพะฒ. ะขะตััั ัะฐะทะดะตะปะตะฝั ะฟะตัะตะฒะพะดะพะผ ัััะพะบะธ.
๐
ะะฐะปะตะต ๐ ัะพัะตะบ โ ะฒะตััะธะฝั ะผะฝะพะณะพัะณะพะปัะฝะธะบะฐ.
๐พ
ะะฐะปะตะต ๐พ ัะพัะตะบ โ ะทะฐะฟัะพัั.
ะัะต ะบะพะพัะดะธะฝะฐัั โ ัะตะปัะต ัะธัะปะฐ ะฟะพ ะผะพะดัะปั ะฝะต ะฟัะตะฒะพััะพะดััะธะต 10^9
*/


int main() {

    int T, N, K;
    //scanf("%d", &T);

    for (int t = 0; t < 1; ++t) { // change 1 to T
        scanf("%d", &N);
        std::vector<point> poly_points = read_points(N);
        DCEL my_dcel(poly_points);

        my_dcel.split_to_monotone(&my_dcel.faces[1]);
        //my_dcel.triangulate_monotone(&my_dcel.faces[1]);


        int a;

    }





    return 0;
}